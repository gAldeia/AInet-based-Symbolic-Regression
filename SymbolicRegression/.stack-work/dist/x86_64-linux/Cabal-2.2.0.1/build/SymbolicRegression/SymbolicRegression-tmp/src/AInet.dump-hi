
==================== FINAL INTERFACE ====================
2018-08-11 17:16:47.0255231 UTC

interface main:AInet 8043
  interface hash: f513d4a6bf32a41cbcd353422ea9b8ce
  ABI hash: f0e18238b7db9274b5eadef432c1fbc9
  export-list hash: f11253d3c1b1bc515f20bbcc4055bc03
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 5ecb6ba9b6af706f6efd41d947c65787
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  AInet.ainet
  AInet.NumClones
  AInet.NumGen
module dependencies: Manipulators Matrix
package dependencies: array-0.5.2.0 base-4.11.1.0 deepseq-1.4.3.0
                      ghc-prim-0.5.2.0 integer-gmp-1.0.2.0 loop-0.3.0 matrix-0.3.6.1
                      primitive-0.6.3.0 random-1.1 time-1.8.0.2 transformers-0.5.5.0
                      vector-0.12.0.1
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         matrix-0.3.6.1:Data.Matrix
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array vector-0.12.0.1:Data.Vector
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  Manipulators 115239a5f1588b994f449d513125ab60
  exports: ef5476b3ac82bda01a68423d9bbf8b79
  Le 78d4852ac142b396d7a034f3ca8fed73
  LeSize 143152edb3db22638f41318efbbe69bf
  PopSize d9e62db1d022bd681d984d5985933cac
  SimplifyT 1f19f38ae60f3e6dc752278014e42cf4
  SupressionT 1eba80d815ad965a1ca5982dc530a252
  adjust 3005c6dcf5c71e402417389d1697fe7a
  rndPopulation decb569dd2f13ba85a935651727c6095
  simplifyPop 50dca0c193e84c4fbf629394b93ec505
  sortByScore e25952c2092f9a9ec09e569e678d911a
import  -/  Matrix bb555b639a8c4553d7fbd1bd5172c1ce
  exports: 8f45b4e20711129c5086b6fd2d9c567b
  Dataset 03634abfa1035ffb9d959e971bf2b362
import  -/  matrix-0.3.6.1:Data.Matrix 253b9ea0b56099efabb5b93ae23f99a5
import  -/  random-1.1:System.Random 31994b60c33f032d578c64a928f735f7
c31bcde72661302692b7887157b71e52
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module AInet.$trModule3 AInet.$trModule1) -}
fbc3990e77ad57dee44778b7305cf5f4
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS AInet.$trModule2) -}
4eaf1af24d0dfcf2cbc644c7e536386a
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("AInet"#) -}
620137b1a642b0cff3100e4d532dd631
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS AInet.$trModule4) -}
40b0b61cb96a3b916878330391f2dbea
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
2fd8499487a3a19f37898178cedf6522
  $wainet ::
    GHC.Prim.Int#
    -> Manipulators.LeSize
    -> Manipulators.SimplifyT
    -> Matrix.Dataset
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Manipulators.Le #)
  {- Arity: 5,
     Strictness: <S,1*U><L,1*U(U)><L,U(U)><L,U(U(U,U,U,U,U,U(U,A,U)),U(U,U,U,U,U,U(U,A,U)))><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Manipulators.LeSize)
                   (w1 :: Manipulators.SimplifyT)
                   (w2 :: Matrix.Dataset)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Manipulators.$wrndPopulation
                        ww
                        w
                        w2
                        w3 of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    letrec {
                      go :: [Manipulators.Le] -> [Manipulators.Le]
                        {- Arity: 1, Strictness: <S,1*U> -}
                      = \ (ds :: [Manipulators.Le]) ->
                        case ds of wild {
                          [] -> GHC.Types.[] @ Manipulators.Le
                          : y ys
                          -> GHC.Types.:
                               @ Manipulators.Le
                               (Manipulators.adjust y w2)
                               (go ys) }
                    } in
                    let {
                      exit :: [Manipulators.Le] -> Manipulators.Le
                        <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                      = \ (p_p :: [Manipulators.Le])[OneShot] ->
                        AInet.ainet_go
                          (Manipulators.sortByScore p_p w2)
                          (GHC.List.lastError @ Manipulators.Le)
                    } in
                    letrec {
                      re'pop :: [Manipulators.Le] -> [Manipulators.Le] -> Manipulators.Le
                        <join 2> {- Arity: 2, Strictness: <L,U><S,1*U> -}
                      = \ (p_p :: [Manipulators.Le]) (ds :: [Manipulators.Le]) ->
                        case ds of wild {
                          [] -> exit p_p
                          : le les'
                          -> case Manipulators.simplify le w1 of wild1 {
                               GHC.Base.Nothing -> re'pop p_p les'
                               GHC.Base.Just le'
                               -> re'pop (GHC.Types.: @ Manipulators.Le le' p_p) les' } }
                    } in
                    re'pop (GHC.Types.[] @ Manipulators.Le) (go ipv1) #) }) -}
a3904f8801898567349b546e1c9a3b18
  type NumClones = GHC.Types.Int
c4a4a889eb7baa47883caa86c509d222
  type NumGen = GHC.Types.Int
233b10db23048762ac6203e5703d658c
  ainet ::
    AInet.NumGen
    -> Manipulators.PopSize
    -> Manipulators.LeSize
    -> AInet.NumClones
    -> Manipulators.SupressionT
    -> Manipulators.SimplifyT
    -> Matrix.Dataset
    -> GHC.Types.IO Manipulators.Le
  {- Arity: 8,
     Strictness: <L,A><S(S),1*U(1*U)><L,1*U(U)><L,A><L,A><L,U(U)><L,U(U(U,U,U,U,U,U(U,A,U)),U(U,U,U,U,U,U(U,A,U)))><S,U>,
     Unfolding: InlineRule (0, True, True)
                AInet.ainet1
                  `cast`
                (<AInet.NumGen>_R
                 ->_R <Manipulators.PopSize>_R
                 ->_R <Manipulators.LeSize>_R
                 ->_R <AInet.NumClones>_R
                 ->_R <Manipulators.SupressionT>_R
                 ->_R <Manipulators.SimplifyT>_R
                 ->_R <Matrix.Dataset>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Manipulators.Le>_R)) -}
841fc2542f6d3ef3d4a61eb5a1b8de9f
  ainet1 ::
    AInet.NumGen
    -> Manipulators.PopSize
    -> Manipulators.LeSize
    -> AInet.NumClones
    -> Manipulators.SupressionT
    -> Manipulators.SimplifyT
    -> Matrix.Dataset
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Manipulators.Le #)
  {- Arity: 8,
     Strictness: <L,A><S(S),1*U(1*U)><L,1*U(U)><L,A><L,A><L,U(U)><L,U(U(U,U,U,U,U,U(U,A,U)),U(U,U,U,U,U,U(U,A,U)))><S,U>,
     Inline: [0],
     Unfolding: InlineRule (8, True, False)
                (\ (w :: AInet.NumGen)
                   (w1 :: Manipulators.PopSize)
                   (w2 :: Manipulators.LeSize)
                   (w3 :: AInet.NumClones)
                   (w4 :: Manipulators.SupressionT)
                   (w5 :: Manipulators.SimplifyT)
                   (w6 :: Matrix.Dataset)
                   (w7 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 AInet.$wainet ww1 w2 w5 w6 w7 }) -}
d11f7bdaba6238a16a0825e5a64fdc3c
  ainet_go :: [Manipulators.Le] -> Manipulators.Le -> Manipulators.Le
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

