
==================== FINAL INTERFACE ====================
2018-08-11 17:16:45.2383891 UTC

interface main:Matrix 8043
  interface hash: 28d5a39ff95aacc1bf1598831553b4a6
  ABI hash: bb555b639a8c4553d7fbd1bd5172c1ce
  export-list hash: 8f45b4e20711129c5086b6fd2d9c567b
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 5ecb6ba9b6af706f6efd41d947c65787
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Matrix.#
  Matrix.listsToDataset
  Matrix.DataPoint
  Matrix.Dataset
  Matrix.X
  Matrix.Y
module dependencies:
package dependencies: array-0.5.2.0 base-4.11.1.0 deepseq-1.4.3.0
                      ghc-prim-0.5.2.0 integer-gmp-1.0.2.0 loop-0.3.0 matrix-0.3.6.1
                      primitive-0.6.3.0 transformers-0.5.5.0 vector-0.12.0.1
orphans: vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         matrix-0.3.6.1:Data.Matrix
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array vector-0.12.0.1:Data.Vector
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  matrix-0.3.6.1:Data.Matrix 253b9ea0b56099efabb5b93ae23f99a5
eb5cd59d3c773d40772777c6f18d5262
  (#) :: GHC.Types.Int -> Matrix.Dataset -> Matrix.DataPoint
  {- Arity: 2,
     Strictness: <L,U(U)><S,1*U(1*U(U,U,U,U,U,U(U,A,U)),1*U(U,U,U,U,U,1*U(U,A,U)))>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Matrix.Dataset) ->
                 case w1 of ww { (,) ww1 ww2 ->
                 case Matrix.$w# w ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 (ww4, ww5) } }) -}
a952f05518d66998cc5869fd71af8557
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Matrix.$trModule3
                   Matrix.$trModule1) -}
a3aa7d703cbec6e5a9aec81ab85e4626
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Matrix.$trModule2) -}
46b9c802828836ffcbcf4067b28bb03d
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Matrix"#) -}
dc4f11bf8a555ce3aa186fb0ba01823f
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Matrix.$trModule4) -}
ae11582919ff300922903bd64962f9e0
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
3755c5d60c8709f3168998d8b0f02509
  $w# ::
    GHC.Types.Int
    -> Matrix.X
    -> Matrix.Y
    -> (# [GHC.Types.Double], GHC.Types.Double #)
  {- Arity: 3,
     Strictness: <L,U(U)><L,1*U(U,U,U,U,U,U(U,A,U))><L,1*U(U,U,U,U,U,1*U(U,A,U))>,
     Inline: [0] -}
9d9d127490dea9cd23c0b91029d88d16
  $wlistsToDataset ::
    [[GHC.Types.Double]] -> (# Matrix.X, Matrix.Y #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
378fc68fa1c2e6377e2122804c4d1498
  type DataPoint = ([GHC.Types.Double], GHC.Types.Double)
03634abfa1035ffb9d959e971bf2b362
  type Dataset = (Matrix.X, Matrix.Y)
512e15efec35f8dc62afc62dfa44c467
  type X = Data.Matrix.Matrix GHC.Types.Double
1af82e3484eb8dd190959a4d23e5a283
  type Y = Data.Matrix.Matrix GHC.Types.Double
d5d46edf01ec89f4ab6bcf3e85376f6e
  listsToDataset :: [[GHC.Types.Double]] -> Matrix.Dataset
  {- Arity: 1, Strictness: <L,U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [[GHC.Types.Double]]) ->
                 case Matrix.$wlistsToDataset w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

